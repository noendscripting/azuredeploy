{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "hubVNETName": {
            "type": "String",
            "metadata": {
                "description":"Name of the HUB VNNET"
            }
        },
        "hubVNETIpPrefix": {
            "type": "string",
            "metadata": {
                "descriotion":"CIDR for Ip Range for the Hub VNET must not overlap with any other VNET e.g. 10.0.0.0/16"
            }
        },
        "hubVNETSubnet1Name": {
            "type": "string",
            "metadata": {
                "description":"Name of the first subnet in the VNET "
            }
        },
        "hubVNETSubnet1IpPrefix": {
            "type": "string",
            "metadata": {
                "description":"CIDR for the first subnet in the HUB vnet, must be inside the IP range of the Hub VNET"
            }
        },
        "spokeVNETName": {
            "type": "String",
            "metadata":{
                "description":"Name of the sppoke VNET"
            }
        },
        "spokeVNETIpPrefix": {
            "type": "string",
            "metadata": {
                "descrition":"CIDR IP range for the Spoke VNET must not overlapp with Ip range for Hub VNET "
            }
        },
        "spokeVNETSubnet1Name": {
            "type": "string",
            "metadata": {
                "description":""
            }
        },
        "spokeVNETSubnet1IpPrefix": {
            "defaultValue": "10.1.0.0/24",
            "type": "string"
        },
        "routeTableName": {
            "defaultValue": "AllInternetToHubSCUS",
            "type": "String"
        },
        "MainFirewallPIPname": {
            "type": "string",
            "defaultValue": "MainFirewallPIP"
        },
        "vmssName": {
            "type": "string",
            "defaultValue": "BaseVM"
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "vadmin"
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "Test@2016"
        },
        "virtualMachineSize": {
            "type": "string",
            "defaultValue": "Standard_B1ls"
        },
        "vrtutalMachineSKU": {
            "type": "string",
            "defaultValue": "2019-Datacenter"
        },
        "virtualMachineImagePublisher": {
            "type": "string",
            "defaultValue": "MicrosoftWindowsServer"
        },
        "virtualMachineImageOffer": {
            "type": "string",
            "defaultValue": "WindowsServer"
        },
        "AzureFirewallName": {
            "type": "string",
            "defaultValue": "MainFirewall"

        },
        "LoadBlancerPublicIPName": {
            "type": "string",
            "defaultValue": "lbl-pip"
        },
        "instanceCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Number of VM instances (100 or less)."
            },
            "maxValue": 100
        },
        "hubVnetBastionName": {
            "type": "string",
            "defaultValue": "hub-vnet-bastion"
        },
        "hubBastionPublicIPName": {
            "type": "string",
            "defaultValue": "hub-bastion-pip"
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "demo-sc-keyvault"
        },
        "secretName": {
            "type": "string",
            "defaultValue":"VMPassword",
            "metadata": {
                "description":"Name of the Key Vault secret where server password is stored"
            }
        }



    },
    "variables": {
        "spokeVNETid": "[resourceId('Microsoft.Network/virtualNetworks',parameters('spokeVNETName'))]",
        "spokeSubnet1Id": "[concat(variables('spokeVnetid'),'/subnets/',parameters('spokeVNETSubnet1Name'))]",
        "hubVnetid": "[resourceId('Microsoft.Network/virtualNetworks',parameters('hubVNETName'))]",
        "hubFirewallSubnetName": "AzurefirewallSubnet",
        "hubFirewallSubnetIpPrefix": "10.0.0.0/24",
        "hubFirewallSubnetId": "[concat(variables('hubVnetid'),'/subnets/',variables('hubFirewallSubnetName'))]",
        "hubFireWallPublicIPId": "[resourceid('Microsoft.Network/publicIPAddresses',parameters('MainFirewallPIPname'))]",
        "nicName": "[concat(variables('namingInfix'), 'nic')]",
        //"vmNicResoucreID": "[resourceId('Microsoft.Network/networkInterfaces',variables('NICName'))]",
        "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
        "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
        "loadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
        "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
        "natPoolName": "[concat(variables('namingInfix'), 'natpool')]",
        "bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
        "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/',variables('bePoolName'))]",
        "natStartPort": 50000,
        "natEndPort": 50119,
        "natBackendPort": 3389,
        "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "osType": {
            "publisher": "[parameters('virtualMachineImagePublisher')]",
            "offer": "[parameters('virtualMachineImageOffer')]",
            "sku": "[parameters('vrtutalMachineSKU')]",
            "version": "latest"
        },
        "imageReference": "[variables('osType')]",
        "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
        "hubBstionPiblicIpId": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('HubBastionPublicIPName'))]",
        "keyVaultSecretName":"[concat(parameters('keyVaultName'), '/',parameters('secretName'))]"
    },
    "resources": [
        //Hub VNET
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-12-01",
            "comments": "Hub VNET with fist subnet",
            "name": "[parameters('hubVNETName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "DisplayName": "HubVnet"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('hubVNETIpPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('hubFirewallSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('hubFirewallSubnetIpPrefix')]",
                            "serviceEndpoints": [
                            ],
                            "delegations": [
                            ]
                        }

                    },
                    {
                        "name": "[parameters('hubVNETSubnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('hubVNETSubnet1IpPrefix')]"
                        }
                    }
                ],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        //Spoke VNET
        {
            "name": "[parameters('spokeVNETName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "SpokeVnet"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('spokeVNETIpPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('spokeVNETSubnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('spokeVNETSubnet1IpPrefix')]"
                        }
                    }

                ]
            }
        },
        //Hub-to-Spoke-Peer
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-12-01",
            "name": "[concat(parameters('hubVNETName'),'/',parameters('hubVNETName'),'-to-',parameters('spokeVNETName'))]",
            "comments": "Hub-to-Spoke-Peer",
            "dependsOn": [
                "[variables('hubVnetid')]",
                "[variables('spokeVNETid')]"
            ],
            "properties": {
                "peeringState": "Connected",
                "remoteVirtualNetwork": {
                    "id": "[variables('spokeVnetid')]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false
            }
        },
        //Spoke-to-Hub-Peer
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-12-01",
            "name": "[concat(parameters('spokeVNETName'),'/',parameters('spokeVNETName'), '-to-',parameters('hubVNETName'))]",
            "comments": "Spoke-to-Hub-Peer",
            "dependsOn": [
                "[variables('hubVnetid')]",
                "[variables('spokeVNETid')]"
            ],
            "properties": {
                "peeringState": "Connected",
                "remoteVirtualNetwork": {
                    "id": "[variables('hubVNETid')]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false
            }
        },
        //Hub Firewall
        {
            "type": "Microsoft.Network/azureFirewalls",
            "apiVersion": "2019-12-01",
            "name": "[parameters('azureFirewallName')]",
            "location": "southcentralus",
            "dependson": [

                "[variables('hubVnetid')]",
                "[variables('hubFireWallPublicIPId')]"

            ],
            "tags": {
                "DisplayName": "MainFirewall"
            },
            "properties": {
                "sku": {
                    "name": "AZFW_VNet",
                    "tier": "Standard"
                },
                "threatIntelMode": "Alert",
                "additionalProperties": {
                },
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('hubFireWallPublicIPId')]"
                            },
                            "subnet": {
                                "id": "[variables('hubFirewallSubnetId')]"
                            }
                        }
                    }
                ],
                "networkRuleCollections": [
                    {
                        "name": "Out-to-Azure",
                        "properties": {
                            "priority": 100,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "out-Azure",
                                    "protocols": [
                                        "TCP",
                                        "UDP"
                                    ],
                                    "sourceAddresses": [
                                        "*"
                                    ],
                                    "destinationAddresses": [
                                        "ApiManagement",
                                        "AppService",
                                        "AppServiceManagement",
                                        "ApplicationInsightsAvailability",
                                        "AzureActiveDirectory",
                                        "AzureAdvancedThreatProtection",
                                        "AzureBackup",
                                        "AzureCloud",
                                        "AzureCognitiveSearch",
                                        "AzureConnectors",
                                        "AzureContainerRegistry",
                                        "AzureCosmosDB",
                                        "AzureDataExplorerManagement",
                                        "AzureDataLake",
                                        "AzureDatabricks",
                                        "AzureEventGrid",
                                        "AzureInformationProtection",
                                        "AzureIoTHub",
                                        "AzureKeyVault",
                                        "AzureMachineLearning",
                                        "AzureMonitor",
                                        "AzureResourceManager",
                                        "AzureTrafficManager",
                                        "AzureSiteRecovery",
                                        "BatchNodeManagement",
                                        "Dynamics365ForMarketingEmail",
                                        "EventHub",
                                        "GuestAndHybridManagement",
                                        "HDInsight",
                                        "MicrosoftCloudAppSecurity",
                                        "MicrosoftContainerRegistry",
                                        "ServiceBus",
                                        "ServiceFabric",
                                        "Sql",
                                        "SqlManagement",
                                        "Storage"
                                    ],
                                    "sourceIpGroups": [],
                                    "destinationIpGroups": [],
                                    "destinationFqdns": [],
                                    "destinationPorts": [
                                        "443"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "applicationRuleCollections": [
                ],
                "natRuleCollections": [
                ]
            }
        },
        //FireWall Public IP
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-12-01",
            "name": "[parameters('MainFirewallPIPname')]",
            "location": "southcentralus",
            "tags": {
                "DisplayName": "MainFireWallPIP"
            },
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": [
                ]
            }
        },
        //RouteTable
        {
            "name": "[parameters('routeTableName')]",
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "DisplayName": "RouteTable"
            },
            "properties": {
                "routes": [
                ],
                "disableBgpRoutePropagation": true
            }
        },
        //Load balancer Public IP
        {
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "name": "[parameters('LoadBlancerPublicIPName')]",
            "Properties": {
                "publicIpAllocationMethod": "Static"
            },
            "tags": {
                "displayName": "BaseVMPublicIP"
            },
            "Type": "Microsoft.Network/publicIpAddresses"
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('loadBalancerName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-03-30",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIPAddressID')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('bePoolName')]"
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "[variables('natPoolName')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "protocol": "Tcp",
                            "frontendPortRangeStart": "[variables('natStartPort')]",
                            "frontendPortRangeEnd": "[variables('natEndPort')]",
                            "backendPort": "[variables('natBackendPort')]"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('lbPoolID')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('lbProbeID')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },

        //Vm Scaleset
        {

            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[variables('namingInfix')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-04-30-preview",
            "tags": {
                "DisplayName": "VM Scaleset"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVNETName'))]"
            ],
            "sku": {
                "name": "[parameters('virtualMachineSize')]",
                "tier": "Standard",
                "capacity": "[parameters('instanceCount')]"
            },
            "properties": {

                "upgradePolicy": {
                    "mode": "Automatic"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage"
                        },
                        "imageReference": "[variables('imageReference')]"
                    },
                    "osProfile": {
                        "computerNamePrefix": "[variables('namingInfix')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]"
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[variables('nicName')]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[variables('ipConfigName')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[variables('spokeSubnet1Id')]"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
        },
        //Autoscale rules
        {
            "type": "Microsoft.Insights/autoscaleSettings",
            "apiVersion": "2015-04-01",
            "name": "autoscalehost",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]"
            ],
            "properties": {
                "name": "autoscalehost",
                "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                "enabled": true,
                "profiles": [
                    {
                        "name": "Profile1",
                        "capacity": {
                            "minimum": "1",
                            "maximum": "10",
                            "default": "1"
                        },
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "Percentage CPU",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT5M",
                                    "timeAggregation": "Average",
                                    "operator": "GreaterThan",
                                    "threshold": 50
                                },
                                "scaleAction": {
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "1",
                                    "cooldown": "PT5M"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "Percentage CPU",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT5M",
                                    "timeAggregation": "Average",
                                    "operator": "LessThan",
                                    "threshold": 30
                                },
                                "scaleAction": {
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1",
                                    "cooldown": "PT5M"
                                }
                            }
                        ]
                    }
                ]
            }
        },
        //Bastion Public IP
        {
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "name": "[parameters('HubBastionPublicIPName')]",
            "Properties": {
                "publicIpAllocationMethod": "Static"
            },
            "tags": {
                "displayName": "HUbBastionPublicIP"
            },
            "Type": "Microsoft.Network/publicIpAddresses"
        },
        //Bastion Deployment 
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2020-04-01",
            "name": "[parameters('hubVnetBastionName')]",
            "location": "southcentralus",
            "tags": {
                "DisplayName": "HubBastion"
            },
            "properties": {
                "dnsName": "bst-c8868d51-698b-449d-8d5d-a71967cefad9.bastion.azure.com",
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[variables('HubBstionPiblicIpId')]"
                            },
                            "subnet": {
                                "id": "[concat(variables('hubVnetid'), '/subnets/AzureBastionSubnet')]"
                            }
                        }
                    }
                ]
            }
        },
        //Key Vault
         {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2016-10-01",
            "name": "[parameters('keyVaultName')]",
            "location": "southcentralus",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "d65b7371-c385-4060-8b4c-b6510616cb67",
                "accessPolicies": [
                    {
                        "tenantId": "d65b7371-c385-4060-8b4c-b6510616cb67",
                        "objectId": "1a959f60-6307-4101-9de7-da51b9bb9dc2",
                        "permissions": {
                            "keys": [
                                "Get",
                                "Create",
                                "Delete",
                                "List",
                                "Update",
                                "Import",
                                "Backup",
                                "Restore",
                                "Recover"
                            ],
                            "secrets": [
                                "Get",
                                "List",
                                "Set",
                                "Delete",
                                "Backup",
                                "Restore",
                                "Recover"
                            ],
                            "certificates": [
                                "Get",
                                "List",
                                "Delete",
                                "Create",
                                "Import",
                                "Update",
                                "ManageContacts",
                                "GetIssuers",
                                "ListIssuers",
                                "SetIssuers",
                                "DeleteIssuers",
                                "ManageIssuers",
                                "Recover"
                            ],
                            "storage": [
                                "get",
                                "list",
                                "delete",
                                "set",
                                "update",
                                "regeneratekey",
                                "setsas",
                                "listsas",
                                "getsas",
                                "deletesas"
                            ]
                        }
                    },
                    {
                        "tenantId": "d65b7371-c385-4060-8b4c-b6510616cb67",
                        "objectId": "af8831ee-a314-4bd7-84f0-888f1c9192d0",
                        "permissions": {
                            "secrets": [
                                "Backup",
                                "List",
                                "Get"
                            ],
                            "keys": [],
                            "certificates": []
                        }
                    }
                ],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true
            }
        },
        //Key Valut Secret
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name":"[variables('keyVaultSecretName')]" ,
            "location": "southcentralus",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ],
            "tags": {
                "file-encoding": "utf-8"
            },
            "properties": {
                "attributes": {
                    "enabled": true
                },
                "value": "Test@2016",
                "contentType": "string"
            }
        }



    ]
}